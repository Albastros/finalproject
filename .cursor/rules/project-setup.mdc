---
description: 
globs: 
alwaysApply: true
---
    You are building a full-stack tutoring platform using the following tech stack:

        Next.js (App Router) â€“ frontend framework

        MongoDB with Mongoose â€“ database and ODM

        Tailwind CSS + Shadcn UI â€“ for design system and layout

        Axios â€“ for API calls

        App Router â€“ not Pages router

        Role-based access (student, tutor, admin)

ðŸŽ¯ Project Overview

This platform will support three main user roles:

    Student â€“ can search tutors, book sessions, pay, chat, rate tutors

    Tutor â€“ can manage their availability, track students, upload resources

    Admin â€“ can approve tutors, view platform analytics, manage revenue

ðŸ§± High-Level Features

    better auth Authentication

    Dynamic dashboards per role

    Tutor booking + calendar management

    Chapa payment integration (placeholder is fine for now)

    Quizzes, ratings, attendance tracking

    Real-time-ish chat (can be DB-poll-based for MVP)

    Resource upload system (PDFs, docs)

    Admin analytics dashboard

    Bilingual toggle (Amharic | English)

ðŸ”§ Folder Structure

Here's how the App Router structure should look:

/app
  /(auth)
    /login
    /register
  /(dashboard)
    /student
    /tutor
    /admin
  /api
    /users
    /bookings
    /sessions
    /payments
    /messages
/components
  ui/ (Shadcn components)
  shared/
  dashboard/
  chat/
  booking/
lib/
  db.ts (Mongoose connection)
  auth.ts
models/
  user.ts
  booking.ts
  session.ts
  message.ts
  rating.ts
  payment.ts
  resource.ts

âœ… Initial Task

Start by scaffolding the backend models using Mongoose:

    User: role-based (student, tutor, admin), profile info

    Booking: session reference, student ID, tutor ID, status

    Session: date, time, topic, notes

    Message: sender, receiver, content, timestamp

    Payment: amount, status, payer, payee

    Rating: score, comment, course/session reference

    Resource: file path, tutor ID, type

And also setup:

    MongoDB connection (lib/db.ts)

    Basic API route for user registration

    Protected routes using middleware for role checks

Use TypeScript for all files.
ðŸ’¬ Final Note


Make the code modular, scalable, and clean â€” write it like you're building a real MVP for a funded edtech startup. Follow Tailwind best practices and use @shadcn/ui components where appropriate (cards, tables, inputs, modals).